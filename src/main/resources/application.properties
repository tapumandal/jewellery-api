spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Dhaka
spring.datasource.url=jdbc:mysql://18.138.152.16:3306/jewellery_db?useTimezone=true&serverTimezone=Asia/Dhaka

#Local
#spring.datasource.url=jdbc:mysql://localhost:3306/a_jewellery_db_test?serverTimezone=UTC&useLegacyDatetimeCode=false
base.path=http://localhost:8081/api/v1/
#base.path=http://192.168.0.100:8081/api/v1/

#Live Test DB PORT 8081
#spring.datasource.url=jdbc:mysql://superhaat.shop:3307/jewellery_db_test?useTimezone=false
#base.path=http://18.138.152.16:8081/api/v1/

#Live Production
#spring.datasource.url=jdbc:mysql://superhaat.shop:3307/jewellery_db?useTimezone=false
#base.path=http://superhaat.shop:8081/api/v1/

#spring.datasource.username=root
#spring.datasource.password=
spring.datasource.username=root
spring.datasource.password=password-jewellery-user
server.port = 8081

storage.path=public/images/
file.upload-dir=/superhaat/public/images/product



## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB









## MySql pull then run with credentials
# docker run --name mysql-server -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=ims-db -e MYSQL_USER=user-super-h44t -e MYSQL_PASSWORD=password-super-h44t -d mysql:5.6
#
# docker run --name mysql-server -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password-jewellery-user -e MYSQL_DATABASE=jewellery_db -e MYSQL_USER=user-jewellery -e MYSQL_PASSWORD=password-jewellery-konya -d mysql:5.6

## phpmyadmin pull then run with mysql server linked
# docker run --name myphpmyadmin -d --link mysql-server:db -p 8001:80 phpmyadmin/phpmyadmin

## Spring app Build
# docker build . -t ims-server-app
## App Run and link with mysql server
# docker run -p 8080:8080 --name ims-server-app  --link mysql-server:mysql -d ims-server-app

#RUN AND BUILD TOGETHER WITHN SPECIFIC NETWORKS
#docker build -t ims-server-app . && docker run  -p 8080:8080 --name ims-server-app  --link mysql-server:mysql -d ims-server-app
#
#
#
#
#
#   LIVE TEST DOCKER COMMAND WITH VOLUME
#   docker run --name=sh-api-test -p 8082:8081 -v super-haat-vol-test:/superhaat -d --rm tapumandal/jewellery-api-test

#docker run --name=jewellery-api -p 8081:8081 -v jewellery-vol:/superhaat -d --rm tapumandal/jewellery-api

#docker run --name=jewellery-front -p 80:80 -d --rm tapumandal/jewellery-front
